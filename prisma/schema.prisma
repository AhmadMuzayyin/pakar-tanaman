generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  location  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Plantings Planting[]
  Plants    Plant[]    // Add relation to Plants
}

model Plant {
  id             Int        @id @default(autoincrement())
  name           String
  type           String
  growingPeriod  Int
  tempMin        Float
  tempMax        Float
  humidityMin    Float
  humidityMax    Float
  rainResistance String
  idealSeason    String
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Plantings      Planting[]
  userId         Int?       // Make it optional to allow plants without a user (public plants)
  User           User?      @relation(fields: [userId], references: [id])
  isPublic       Boolean    @default(true) // New field to determine if plant is public
}

model Planting {
  id                  Int           @id @default(autoincrement())
  userId              Int
  plantId             Int
  plantingDate        DateTime
  expectedHarvestDate DateTime
  actualHarvestDate   DateTime?
  status              String
  notes               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Plant               Plant         @relation(fields: [plantId], references: [id])
  User                User          @relation(fields: [userId], references: [id])
  Logs                PlantingLog[]
}

model PlantingLog {
  id         Int      @id @default(autoincrement())
  plantingId Int
  logType    String
  date       DateTime
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Planting   Planting @relation(fields: [plantingId], references: [id])
}

model WeatherData {
  id         Int      @id @default(autoincrement())
  location   String
  date       DateTime
  tempMin    Float
  tempMax    Float
  tempAvg    Float
  humidity   Float
  rainfall   Float
  windSpeed  Float
  conditions String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
